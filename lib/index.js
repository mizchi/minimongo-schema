// Generated by CoffeeScript 1.8.0
(function() {
  var IndexedDb, MemoryDb, Promise, buildDatabases, createDb, createIdbCollections, minimongo;

  minimongo = require('minimongo');

  MemoryDb = minimongo.MemoryDb;

  IndexedDb = minimongo.IndexedDb;

  Promise = require('bluebird');

  require('indexeddb-mock').reset();

  createIdbCollections = function(db, collectionSchemas, withClear) {
    if (withClear == null) {
      withClear = false;
    }
    return Promise.all(collectionSchemas.map(function(col) {
      return new Promise(function(done) {
        if (withClear) {
          return db.removeCollection(col.name, function() {
            return db.addCollection(col.name, function() {
              return done();
            });
          });
        } else {
          return db.addCollection(col.name, function() {
            return done();
          });
        }
      });
    }));
  };

  createDb = function(schema, withClear) {
    if (withClear == null) {
      withClear = false;
    }
    return new Promise(function(done) {
      var col, db, _i, _len, _ref;
      switch (schema.type) {
        case 'indexedDb':
          return new IndexedDb({
            namespace: schema.namespace
          }, function(db) {
            return createIdbCollections(db, schema.collections, withClear).then(function() {
              return done(db);
            });
          });
        case 'memoryDb':
          db = new MemoryDb();
          _ref = schema.collections;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            col = _ref[_i];
            db.addCollection(col.name);
          }
          return done(db);
      }
    });
  };

  buildDatabases = function(schema, withClear) {
    if (withClear == null) {
      withClear = false;
    }
    return Promise.all(schema.databases.map(function(sc) {
      return createDb(sc, withClear);
    }));
  };

  module.exports = buildDatabases;

}).call(this);
